
#include "Cube.hpp"

using namespace glm;

 static GLfloat g_colour_buffer_data[12*3*3];  // Colours of ground blocks
 
 // Vertexs for the cube
 static const GLfloat g_vertex_buffer_data[] = { 
		-1.0f, -1.0f,  1.0f,
		 1.0f, -1.0f,  1.0f,
		 1.0f,  1.0f,  1.0f,
		-1.0f,  1.0f,  1.0f,
		-1.0f, -1.0f, -1.0f,
		 1.0f, -1.0f, -1.0f,
		 1.0f,  1.0f, -1.0f,
		-1.0f,  1.0f, -1.0f
	};

 // Connects the vertexs to make the cube 
 static const GLuint element_buffer[] = {
		0, 1, 2,
		2, 3, 0,
		3, 2, 6,
		6, 7, 3,
		7, 6, 5,
		5, 4, 7,
		4, 5, 1,
		1, 0, 4,
		4, 0, 3,
		3, 7, 4,
		1, 5, 6,
		6, 2, 1
};

// Two UV coordinatesfor each vertex. They were created withe Blender.
  static const GLfloat g_uv_buffer_data[] = { 
		0.000059f, 1.0f-0.000004f, 
		0.000103f, 1.0f-0.336048f, 
		0.335973f, 1.0f-0.335903f, 
		1.000023f, 1.0f-0.000013f, 
		0.667979f, 1.0f-0.335851f, 
		0.999958f, 1.0f-0.336064f, 
		0.667979f, 1.0f-0.335851f, 
		0.336024f, 1.0f-0.671877f, 
		0.667969f, 1.0f-0.671889f, 
		1.000023f, 1.0f-0.000013f, 
		0.668104f, 1.0f-0.000013f, 
		0.667979f, 1.0f-0.335851f, 
		0.000059f, 1.0f-0.000004f, 
		0.335973f, 1.0f-0.335903f, 
		0.336098f, 1.0f-0.000071f, 
		0.667979f, 1.0f-0.335851f, 
		0.335973f, 1.0f-0.335903f, 
		0.336024f, 1.0f-0.671877f, 
		1.000004f, 1.0f-0.671847f, 
		0.999958f, 1.0f-0.336064f, 
		0.667979f, 1.0f-0.335851f, 
		0.668104f, 1.0f-0.000013f, 
		0.335973f, 1.0f-0.335903f, 
		0.667979f, 1.0f-0.335851f, 
		0.335973f, 1.0f-0.335903f, 
		0.668104f, 1.0f-0.000013f, 
		0.336098f, 1.0f-0.000071f, 
		0.000103f, 1.0f-0.336048f, 
		0.000004f, 1.0f-0.671870f, 
		0.336024f, 1.0f-0.671877f, 
		0.000103f, 1.0f-0.336048f, 
		0.336024f, 1.0f-0.671877f, 
		0.335973f, 1.0f-0.335903f, 
		0.667969f, 1.0f-0.671889f, 
		1.000004f, 1.0f-0.671847f, 
		0.667979f, 1.0f-0.335851f
	};

void Cube::init()
{
	//Length of buffer
	elementbufferlength = 36; 
	glGenVertexArrays(1, &VertexArrayID);
	glBindVertexArray(VertexArrayID);

	programID = LoadShaders( "vertex.vs", "fragment.fs" );
	programID2 = LoadShaders( "tvertex.vs", "tfragment.fs" );

		// Get a handle for our "MVP" uniform
	MatrixID = glGetUniformLocation(programID, "MVP");

	// Load the texture using any two methods
	Texture = loadDDS("wood.tga");
	
	// Get a handle for our "myTextureSampler" uniform
	TextureID  = glGetUniformLocation(programID2, "myTextureSampler");

	// One color for each vertex. They were generated randomly.
	for(int i = 0; i < 12*3; i++)
	{ 
		g_colour_buffer_data[3*i+0] = 0.039f;
		g_colour_buffer_data[3*i+1] = 0.186f;
		g_colour_buffer_data[3*i+2] = 0.059f;		
	};

	glGenBuffers(1, &vertexbuffer);
	glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_buffer_data), g_vertex_buffer_data, GL_STATIC_DRAW);

	glGenBuffers(1, &elementbuffer);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, elementbuffer);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(element_buffer), element_buffer, GL_STATIC_DRAW);

	glGenBuffers(1, &colourbuffer);
	glBindBuffer(GL_ARRAY_BUFFER, colourbuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(g_colour_buffer_data), g_colour_buffer_data, GL_STATIC_DRAW);

	glGenBuffers(1, &uvbuffer);
	glBindBuffer(GL_ARRAY_BUFFER, uvbuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(g_uv_buffer_data), g_uv_buffer_data, GL_STATIC_DRAW);	

}

void Cube::setupDraw(GLFWwindow* window)
 {
	// Clear the screen
	glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// Use our shader
	glUseProgram(programID);

	// Runs the void in controls, for keyboard and mouse input
	cameraControls(window);

	// Attribute buffer for vertex
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
	glVertexAttribPointer(
		0,                  // attribute 0. This matches the layout in the shaders.
		3,                  // size
		GL_FLOAT,           // type
		GL_FALSE,           // normalized?
		0,                  // stride
		(void*)0            // array buffer offset
	);

	// Attribute buffer for ground colours
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER, colourbuffer);
	glVertexAttribPointer(
		1,                                // attribute 1. This matches the layout in the shaders.
		3,                                // size
		GL_FLOAT,                         // type
		GL_FALSE,                         // normalized?
		0,                                // stride
		(void*)0                          // array buffer offset
	);
 }

void Cube::drawGround(float xLength, float zLength)
{
	//This does not contain a Y co-ordinate because the ground must all be level
	for(float z = 0; z < (2 * zLength); z += 2) {
	 for(float x = 0; x < (2 * xLength); x += 2) {
		drawCube(x, 0.0f, z);
	 }
	}
}

void Cube::drawHouse(float xLength, float zLength)
{
	// Disables the previous colour attributes, so it can be refilled with
	// the new colour attributes.
	glDisableVertexAttribArray(1);

	// Use our shader
	glUseProgram(programID2);

	// Get a handle for our "MVP" uniform
	MatrixID = glGetUniformLocation(programID2, "MVP");
	
	// Bind our texture in Texture Unit 0
	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, Texture);
	// Set our "myTextureSampler" sampler to user Texture Unit 0
	glUniform1i(TextureID, 0);
	
	// Attribute buffer for house colours
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER, uvbuffer);
	glVertexAttribPointer(
		1,                                // attribute 1. This matches the layout in the shaders.
		2,                                // size
		GL_FLOAT,                         // type
		GL_FALSE,                         // normalized?
		0,                                // stride
		(void*)0                          // array buffer offset
	);
		
	for(float y = 2; y <= 6; y += 2) {  // Controls the Y position
	 for(float z = 2; z <= (zLength*2); z+= 2) { //Controls the Z position
	  for(float x = 2; x <= (xLength*2); x += 2) { //Controls the X Position
		if((z == 6 && x == 2) && y < 6) { } //Creates a Doorway

		else if((z >= (zLength/2+3) && z <= (zLength/2+5)) && x == (xLength*2) && y == 4) { } //Creates a 2 cube long window

		else if( y <= 6 ){ drawCube(x, y, z); } 

		if((z >= 4 && z < (zLength*2)) && x != (xLength*2) && y < 6) { x = (xLength*2-2); }  //Creates the gaps between the walls	
	  }
	 }
	}
	
}

void Cube::drawCube(float x, float y, float z)
{
	mat4 ProjectionMatrix = getProjectionMatrix();
	mat4 ViewMatrix = getViewMatrix();
	mat4 ModelMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(x, y, z));
	mat4 MVP = ProjectionMatrix * ViewMatrix * ModelMatrix;

	glUniformMatrix4fv(MatrixID, 1, GL_FALSE, &MVP[0][0]);
	glDrawElements(GL_TRIANGLES, elementbufferlength, GL_UNSIGNED_INT, (void*)0);
}

void Cube::update( GLFWwindow* window )
{
	// Disables the vertex and house colour attribs
	glDisableVertexAttribArray(0);
	glDisableVertexAttribArray(2);	

	// Swap buffers
	glfwSwapBuffers(window);
	glfwPollEvents();
}

void Cube::close()
{
	// Cleans up by deleting the buffers
	glDeleteBuffers(1, &vertexbuffer);
	glDeleteBuffers(1, &colourbuffer);
	glDeleteBuffers(1, &uvbuffer);
	glDeleteProgram(programID);
	glDeleteProgram(programID2);
	glDeleteVertexArrays(1, &VertexArrayID);
} 


